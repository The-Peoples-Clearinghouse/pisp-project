apiVersion: apps/v1
kind: Deployment
metadata:
  name: thirdparty-api-svc
  labels:
    app: thirdparty-api-svc
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1 # exeed the replicas by 1 pod
  selector:
    matchLabels:
      app: thirdparty-api-svc
  template:
    metadata:
      labels:
        app: thirdparty-api-svc
    spec:
      containers:
        - name: thirdparty-api-svc
          image: mojaloop/thirdparty-api-svc:v12.0.0
          # image: mojaloop/thirdparty-api-svc:v11.8.3
          # command: [ "tail", "-f", "/dev/null" ]
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /health
              port: 3008
          readinessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /health
              port: 3008
          volumeMounts:
            - name: thirdparty-api-svc-config-volume
              mountPath: /opt/thirdparty-api-svc/config
      volumes:
        - name: thirdparty-api-svc-config-volume
          configMap:
            name: thirdparty-api-svc-config
            items:
            - key: default.json
              path: default.json
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: thirdparty-api-svc-config
data:
  default.json: |
    {
      "PORT": 3008,
      "HOST": "0.0.0.0",
      "INSPECT": {
        "DEPTH": 4,
        "SHOW_HIDDEN": false,
        "COLOR": true
      },
      "ENDPOINT_CACHE_CONFIG": {
        "expiresIn": 180000,
        "generateTimeout": 30000
      },
      "ENDPOINT_SERVICE_URL": "http://centralledger:3001",
      "ERROR_HANDLING": {
        "includeCauseExtension": true,
        "truncateExtensions": true
      },
      "INSTRUMENTATION": {
        "METRICS": {
          "DISABLED": false,
          "labels": {
            "eventId": "*"
          },
          "config": {
            "timeout": 5000,
            "prefix": "moja_3p_api",
            "defaultLabels": {
              "serviceName": "thirdparty-api-svc"
            }
          }
        }
      },
      "KAFKA": {
        "TOPIC_TEMPLATES": {
          "GENERAL_TOPIC_TEMPLATE": {
            "TEMPLATE": "topic-{{functionality}}-{{action}}",
            "REGEX": "topic-(.*)-(.*)"
          }
        },
        "CONSUMER": [
          {
            "eventType": "notification",
            "eventAction": "commit",
            "options": {
              "mode": 2,
              "batchSize": 1,
              "pollFrequency": 10,
              "recursiveTimeout": 100,
              "messageCharset": "utf8",
              "messageAsJSON": true,
              "sync": true,
              "consumeTimeout": 1000
            },
            "rdkafkaConf": {
              "client.id": "3p-con-notification-event",
              "group.id": "3p-group-notification-event",
              "metadata.broker.list": "kafka:9092",
              "socket.keepalive.enable": true
            },
            "topicConf": {
              "auto.offset.reset": "earliest"
            }
          }
        ]
      },
      "MOCK_CALLBACK": {
        "transactionRequestId": "abc-12345",
        "pispId": "pisp"
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: thirdparty-api-svc
spec:
  ports:
  - port: 3008
  selector:
    app: thirdparty-api-svc
  clusterIP: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: thirdparty-api-svc
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: thirdparty-api-svc.local
      http:
        paths:
          - path: /thirdparty-api-svc(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: thirdparty-api-svc
                port:
                  number: 4004
